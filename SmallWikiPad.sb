' Small Wiki Pad
' Version 0.41a
' Copyright Â© 2015-2017 Nonki Takahashi.  The MIT License.
' Last update 2017-08-02
' Program ID NVD371-5

GraphicsWindow.Title = "Small Wiki Pad 0.41a"
CR = Text.GetCharacter(13)
LF = Text.GetCharacter(10)
LT = "<"
WQ = Text.GetCharacter(34)
SB_Workaround()
Form()
LoadWikiText()
LoadHTMLText()
Controls.SetTextBoxText(tbox, wikiText)
GraphicsWindow.MouseDown = OnMouseDown
GraphicsWindow.MouseMove = OnMouseMove
While "True"
  If mouseDown Then
    Controls_TabClick()
    If tabClicked Then
      ChangeTab()
    Else
      Controls_ScrollBar()
    EndIf
    mouseDown = "False"
  EndIf
EndWhile

Sub ChangeTab
  i = lastTabClicked
  If i <> iLast Then
    Shapes.ShowShape(hline[iLast]) 
    Shapes.HideShape(hline[i])
    If (i = 1) Or (i = 2) Then
      If iLast = 3 Then
        Stack.PushValue("local", i)
        i = iDocument
        Group_Hide()
        x = grp["x"]
        y = ymaxPic
        Group_Move()
        i = iScrollbar
        Group_Hide()
        i = iThumb
        Group_Hide()
        x = grp["x"]
        y = 32 + 14
        Group_Move()
        i = Stack.PopValue("local")
      EndIf
      Controls.ShowControl(tbox)
      If i = 1 Then
        Controls.SetTextBoxText(tbox, wikiText)
      ElseIf i = 2 Then
        Controls.SetTextBoxText(tbox, htmlText)
      EndIf
    ElseIf i = 3 Then
      Stack.PushValue("local", i)
      Controls.HideControl(tbox)
      ' initialize shapes
      If iDocument = "" Then
        Shapes_Init()
        scale = 1
        angle = 0
        ' add shapes
        name = "document"
        Group_Add()
        iDocument = nGroup
        ph = shHeight             ' picture height
        ymaxPic = 32 + shY
        yminPic = gh - ph
        x = shX
        y = ymaxPic
        i = iDocument
        Group_Move()
      Else
        i = iDocument
        Group_Show()
      EndIf
      If iScrollBar = "" Then
        x = gw - 12
        y = 32
        height = gh - y
        scale = 1
        Controls_AddVScroll()
      Else
        i = iScrollBar
        Group_Show()
        i = iThumb
        Group_Show()
      EndIf
      i = iTabs
      Group_Remove()
      Group_Add()
      For _i = 1 To 3
        shp = shape[_i * 3]
        menu[_i] = shp["obj"]
        shp = shape[_i * 3 + 2]
        hline[_i] = shp["obj"]
      EndFor
      i = Stack.PopValue("local")
      Shapes.HideShape(hline[i])
    EndIf
    iLast = i
  EndIf
EndSub

Sub Form
  gw = 598
  gh = 428
  GraphicsWindow.Width = gw
  GraphicsWindow.Height = gh
  GraphicsWindow.BrushColor = "#333333"
  GraphicsWindow.FontName = "Segoe UI"
  GraphicsWindow.FontBold = "False"
  GraphicsWindow.PenWidth = 1
  GraphicsWindow.PenColor = "#666666"
  posX = "1=5;2=105;3=205;4=305;"
  item = "1=Wiki;2=HTML;3=Preview;"
  scale = 1
  Controls_AddTabs()
  iTabs = nGroup
  tbox = Controls.AddMultiLineTextBox(posX[1], 35)
  Controls.SetSize(tbox, gw - 10, gh - 40)
EndSub

Sub LoadWikiText
  wikiText = "**bold**" + LT + "br>" + CR + LF
  wikiText = wikiText + "_italics_" + LT + "br>"  + CR + LF
  wikiText = wikiText + "# Heading 1" + CR + LF
  wikiText = wikiText + "## Heading 2" + CR + LF
  wikiText = wikiText + "### Heading 3" + CR + LF
  wikiText = wikiText + "- Bullet List" + CR + LF
  wikiText = wikiText + "   - Bullet List 2" + CR + LF
  wikiText = wikiText + "1. Number List" + CR + LF
  wikiText = wikiText + "   1. Number List 2" + CR + LF
  wikiText = wikiText + "![](Turtle.png)" + CR + LF
  wikiText = wikiText + "|Table Heading 1|Table Heading 2|" + CR + LF
  wikiText = wikiText + "|---|---|" + CR + LF
  wikiText = wikiText + "|Row 1 - Cell 1|Row 1 - Cell 2|" + CR + LF
  wikiText = wikiText + "|Row 2 - Cell 1|Row 2 - Cell 2|" + CR + LF
  wikiText = wikiText + "___"
EndSub

Sub LoadHTMLText
  htmlText = LT + "html>" + CR + LF
  htmlText = htmlText + LT + "body>" + CR + LF
  htmlText = htmlText + LT + "p>" + CR + LF
  htmlText = htmlText + LT + "strong>bold" + LT + "/strong>" + LT + "br>" + CR + LF
  htmlText = htmlText + LT + "em>italics" + LT + "/em>" + LT + "br>" + CR + LF
  htmlText = htmlText + LT + "/p>" + CR + LF
  htmlText = htmlText + LT + "h1>Heading 1" + LT + "/h1>" + CR + LF
  htmlText = htmlText + LT + "h2>Heading 2" + LT + "/h2>" + CR + LF
  htmlText = htmlText + LT + "h3>Heading 3" + LT + "/h3>" + CR + LF
  htmlText = htmlText + LT + "ul>" + CR + LF
  htmlText = htmlText + LT + "li>Bullet List" + LT + "/li>" + LT + "br>" + CR + LF
  htmlText = htmlText + LT + "ul>" + CR + LF
  htmlText = htmlText + LT + "li>Bullet List 2" + LT + "/li>" + CR + LF
  htmlText = htmlText + LT + "/ul>" + CR + LF
  htmlText = htmlText + LT + "/ul>" + CR + LF
  htmlText = htmlText + LT + "ol>" + CR + LF
  htmlText = htmlText + LT + "li>Number List" + LT + "/li>" + LT + "br>" + CR + LF
  htmlText = htmlText + LT + "ol typr=i>" + CR + LF
  htmlText = htmlText + LT + "li>Number List 2" + LT + "/li>" + CR + LF
  htmlText = htmlText + LT + "/ol>" + CR + LF
  htmlText = htmlText + LT + "/ol>" + CR + LF
  htmlText = htmlText + LT + "p>" + LT + "img src='http://www.nonkit.com/smallbasic.files/Turtle.png'>" + LT + "/p>" + CR + LF
  htmlText = htmlText + LT + "table border=1>" + CR + LF
  htmlText = htmlText + LT + "tr>" + LT + "th>Table Heading 1" + LT + "/th>" + LT + "th>Table Heading 2" + LT + "/th>" + LT + "/tr>" + CR + LF
  htmlText = htmlText + LT + "tr>" + LT + "td>Row 1-Cell 1" + LT + "/td>" + LT + "td>Row 1-Cell 2" + LT + "/td>" + LT + "/tr>" + CR + LF
  htmlText = htmlText + LT + "tr>" + LT + "td>Row 2-Cell 1" + LT + "/td>" + LT + "td>Row 2-Cell 2" + LT + "/td>" + LT + "/tr>" + CR + LF
  htmlText = htmlText + LT + "/table>" + CR + LF
  htmlText = htmlText + LT + "hr>" + CR + LF
  htmlText = htmlText + LT + "/body>" + CR + LF
  htmlText = htmlText + LT + "/html>"
EndSub

Sub OnMouseDown
  dx = GraphicsWindow.MouseX
  dy = GraphicsWindow.MouseY
  mouseDown = "True"
EndSub

Sub OnMouseMove
  mx = GraphicsWindow.MouseX
  my = GraphicsWindow.MouseY
  mouseMove = "True"
EndSub

Sub Controls_AddTabs
  ' param item[] - tab items
  shX = 0 ' x offset
  shY = 0 ' y offset
  shape = ""
  shape[1] = "func=rect;x=0;y=0;width="+gw+";height=32;pw=0;bc=#FFFFFF;"
  shape[2] = "func=line;x="+posX[1]+";y=5;x1=0;y1=0;x2="+(posX[4]-posX[1])+";y2=0;pw=1;pc=#666666;"
  n = Array.GetItemCount(item)
  For i = 1 To n
    shape[i * 3] = "func=text;x="+(posX[i]+5)+";y=10;text="+item[i]+";fn=Segoe UI;fs=12;"
    shape[i * 3 + 1] = "func=line;x="+posX[i]+";y=5;x1=0;y1=0;x2=0;y2=25;pw=1;pc=#666666;"
    shape[i * 3 + 2] = "func=line;x="+posX[i]+";y=30;x1=0;y1=0;x2="+(posX[i+1]-posX[i])+";y2=0;pw=1;pc=#666666;"
  EndFor
  iLast = 1
  shape[n * 3 + 3] = "func=line;x="+posX[4]+";y=5;x1=0;y1=0;x2=0;y2=25;pw=1;pc=#666666;"
  shape[n * 3 + 4] = "func=line;x="+posX[4]+";y=30;x1=0;y1=0;x2="+(gw-5-posX[4])+";y2=0;pw=1;pc=#666666;"
  name = "tabs"
  Group_Add()
  For i = 1 To n
    shp = shape[i * 3]
    menu[i] = shp["obj"]
    shp = shape[i * 3 + 2]
    hline[i] = shp["obj"]
  EndFor
  Shapes.HideShape(hline[iLast])
EndSub

Sub Controls_AddVScroll
  ' param x - left position x
  ' param y - top position y
  ' param height - height
  ' return group - array of shapes groups
  ' return nShape - number of indices for shape array
  ' return nGroup - number of indices for group array
  ' add vertical scroll bar
  shX = x
  shY = y
  shape = ""
  shape[1] = "func=rect;x=0;y=0;width=14;height="+height+";pw=0;bc=#99CCCCCC;"
  shape[2] = "func=rect;x=0;y=0;width=14;height=14;pw=0;bc=#CCCCCC;"
  shape[3] = "func=line;x=3;y=4;x1=0;y1=3;x2=3;y2=0;pw=1;pc=#666666;"
  shape[4] = "func=line;x=6;y=4;x1=0;y1=0;x2=3;y2=3;pw=1;pc=#666666;"
  shape[5] = "func=rect;x=0;y="+(height-14)+";width=14;height=14;pw=0;bc=#CCCCCC;"
  shape[6] = "func=line;x=3;y="+(height-8)+";x1=0;y1=0;x2=3;y2=3;pw=1;pc=#666666;"
  shape[7] = "func=line;x=6;y="+(height-8)+";x1=0;y1=3;x2=3;y2=0;pw=1;pc=#666666;"
  name = "scroll"
  Group_Add()
  iScrollBar = nGroup
  ' add thumb
  bh = height - 28      ' scroll bar height
  th = bh * height / ph ' thumb heignt
  shX = x
  shY = y + 14
  shape = ""
  shape[1] = "func=rect;x=0;y=0;width=14;height="+th+";pw=0;bc=#999999;"
  name = "thumb"
  Group_Add()
  iThumb = nGroup
  yminThumb = y + 14
  ymaxThumb = y + height - 14 - th
  hPage = height        ' page height in scroll bar
EndSub

Sub Controls_Scroll
  ' param yMove - relative thumb move
  i = iDocument
  grp = group[i]
  x = grp["x"]
  y = grp["y"] - yMove * hPage / (ymaxThumb - yminThumb)
  Group_Move()
EndSub

Sub Controls_ScrollBar
  grp = group[iScrollBar]
  shX = grp["x"]
  shY = grp["y"]
  shape = grp["shape"]
  iMin = 1
  iMax = Array.GetItemCount(shape)
  shp = shape[iMin]     ' vertical scroll bar
  x1 = shX + shp["rx"]
  x2 = shX + shp["rx"] + shp["width"]
  y1 = shY + shp["ry"]
  y2 = shY + shp["ry"] + shp["height"]
  If x1 <= dx And dx <= x2 And y1 <= dy And dy <= y2 Then
    shp = shape[iMin+1] ' line up button
    y1 = shY + shp["ry"]
    y2 = shY + shp["ry"] + shp["height"]
    shp = shape[iMin+4] ' line down button
    y3 = shY + shp["ry"]
    y4 = shY + shp["ry"] + shp["height"]
    grp = group[iThumb] ' thumb
    shX = grp["x"]
    shY = grp["y"]
    shape = grp["shape"]
    shp = shape[iMin]
    y5 = shY + shp["ry"]
    y6 = shY + shp["ry"] + shp["height"]
    y = y5
    yLast = y5
    If y1 <= dy And dy <= y2 Then
      ' line up
      x = shX
      y = y5 - hPage
      If y < yminThumb Then
        y = yminThumb
      EndIf
    ElseIf y3 <= dy And dy <= y4 Then
      ' line down
      x = shX
      y = y5 + hPage
      If ymaxThumb < y Then
        y = ymaxThumb
      EndIf
    ElseIf y5 <= dy And dy <= y6 Then
      ' thumb truck
      myLast = dy
      myThumb = dy - y5
      While Mouse.IsLeftButtonDown
        If mouseMove Then
          x = shX
          y = my - myThumb
          If ymaxThumb < y Then
            y = ymaxThumb
          ElseIf y < yminThumb Then
            y = yminThumb
          EndIf
          If y <> yLast Then
            yMove = y - yLast
            yLast = y
            i = iThumb 
            Group_Move()       ' move thumb
            Controls_Scroll()
          EndIf
          myLast = my
          mouseMove = "False"
        EndIf
      EndWhile
    ElseIf dy < y5 Then
      ' page up
      x = shX
      y = y5 - hPage
      If y < yminThumb Then
        y = yminThumb
      EndIf
    ElseIf y6 < dy Then
      ' page down
      x = shX
      y = y5 + hPage
      If ymaxThumb < y Then
        y = ymaxThumb
      EndIf
    EndIf
    If y <> yLast Then
      x = shX
      yMove = y - yLast
      i = iThumb
      Group_Move()       ' move thumb
      Controls_Scroll()
    EndIf
  EndIf
EndSub

Sub Controls_TabClick
  tabClicked = "False"
  If 5 <= dy And dy < 30 Then
    For i = 1 To 3
      If posX[i] <= dx And dx < posX[i + 1] Then
        tabClicked = "True"
        lastTabClicked = i
        i = 3 ' exit for
      EndIf
    EndFor 
  EndIf
EndSub

SubÂ Group_Add
Â Â ' Group | add shapes to a group
Â Â ' param name - group name
Â Â ' param shX, shY, origin of shape array
Â Â ' param shape[] - shape array
Â Â ' param nGroup - number of group
Â Â ' return nGroup - updated number of group
Â Â ' return group - group array
Â Â Stack.PushValue("local",Â i)
Â Â Stack.PushValue("local",Â x)
Â Â Stack.PushValue("local",Â y)
Â Â nGroupÂ =Â nGroupÂ +Â 1
Â Â grpÂ =Â ""
Â Â grp["name"]Â =Â name
Â Â grp["x"]Â =Â shX
Â Â grp["y"]Â =Â shY
Â Â grp["angle"]Â =Â 0
Â Â grp["dir"]Â =Â 1
Â Â Shapes_CalcWidthAndHeight()
Â Â grp["width"]Â =Â shWidth
Â Â grp["cx"]Â =Â shWidthÂ /Â 2
Â Â grp["height"]Â =Â shHeight
Â Â sÂ =Â 1
Â Â grp["scale"]Â =Â s
Â Â ForÂ iÂ =Â 1Â ToÂ Array.GetItemCount(shape)
Â Â Â Â shpÂ =Â shape[i]
Â Â Â Â GraphicsWindow.PenWidthÂ =Â shp["pw"]Â *Â s
Â Â Â Â IfÂ shp["pw"]Â >Â 0Â Then
Â Â Â Â Â Â GraphicsWindow.PenColorÂ =Â shp["pc"]
Â Â Â Â EndIf
Â Â Â Â IfÂ Text.IsSubText("rect|ell|tri|text",Â shp["func"])Â Then
Â Â Â Â Â Â GraphicsWindow.BrushColorÂ =Â shp["bc"]
Â Â Â Â EndIf
Â Â Â Â IfÂ shp["func"]Â =Â "rect"Â Then
Â Â Â Â Â Â shp["obj"]Â =Â Shapes.AddRectangle(shp["width"]Â *Â s,Â shp["height"]Â *Â s)
Â Â Â Â ElseIfÂ shp["func"]Â =Â "ell"Â Then
Â Â Â Â Â Â shp["obj"]Â =Â Shapes.AddEllipse(shp["width"]Â *Â s,Â shp["height"]Â *Â s)
Â Â Â Â ElseIfÂ shp["func"]Â =Â "tri"Â Then
Â Â Â Â Â Â shp["obj"]Â =Â Shapes.AddTriangle(shp["x1"]Â *Â s,Â shp["y1"]Â *Â s,Â shp["x2"]Â *Â s,Â shp["y2"]Â *Â s,Â shp["x3"]Â *Â s,Â shp["y3"]Â *Â s)
Â Â Â Â ElseIfÂ shp["func"]Â =Â "line"Â Then
Â Â Â Â Â Â shp["obj"]Â =Â Shapes.AddLine(shp["x1"]Â *Â s,Â shp["y1"]Â *Â s,Â shp["x2"]Â *Â s,Â shp["y2"]Â *Â s)
Â Â Â Â ElseIfÂ shp["func"]Â =Â "text"Â Then
Â Â Â Â Â Â IfÂ silverlightÂ Then
Â Â Â Â Â Â Â Â fsÂ =Â Math.Floor(shp["fs"]Â *Â 0.9)
Â Â Â Â Â Â Else
Â Â Â Â Â Â Â Â fsÂ =Â shp["fs"]
Â Â Â Â Â Â EndIf
Â Â Â Â Â Â GraphicsWindow.FontSizeÂ =Â fsÂ *Â s
Â Â Â Â Â Â GraphicsWindow.FontNameÂ =Â shp["fn"]
      GraphicsWindow.FontBold = shp["fb"]
      GraphicsWindow.FontItalic = shp["fi"]
Â Â Â Â Â Â shp["obj"]Â =Â Shapes.AddText(shp["text"])
    ElseIf shp["func"] = "img" Then
      shp["obj"] = Shapes.AddImage(shp["src"])
      Shapes.Move(shp["obj"], shp["x"], shp["y"])
Â Â Â Â EndIf
Â Â Â Â xÂ =Â shp["x"]
Â Â Â Â yÂ =Â shp["y"]
Â Â Â Â shp["rx"]Â =Â x
Â Â Â Â shp["ry"]Â =Â y
Â Â Â Â IfÂ silverlightÂ AndÂ Text.IsSubText("tri|line",Â shp["func"])Â Then
Â Â Â Â Â Â alphaÂ =Â Math.GetRadians(shp["angle"])
Â Â Â Â Â Â SB_RotateWorkaround()
Â Â Â Â Â Â shp["wx"]Â =Â x
Â Â Â Â Â Â shp["wy"]Â =Â y
Â Â Â Â EndIf
Â Â Â Â Shapes.Move(shp["obj"],Â shXÂ +Â xÂ *Â s,Â shYÂ +Â yÂ *Â s)
Â Â Â Â IfÂ Text.IsSubText("rect|ell|tri|text",Â shp["func"])Â AndÂ (shp["angle"]Â <>Â 0)Â AndÂ (shp["angle"]Â <>Â "")Â Then
Â Â Â Â Â Â Shapes.Rotate(shp["obj"],Â shp["angle"])
Â Â Â Â EndIf
Â Â Â Â shape[i]Â =Â shp
Â Â EndFor
Â Â grp["shape"]Â =Â shape
Â Â group[nGroup]Â =Â grp
Â Â yÂ =Â Stack.PopValue("local")
Â Â xÂ =Â Stack.PopValue("local")
Â Â iÂ =Â Stack.PopValue("local")
EndSub

SubÂ Group_Dump
Â Â ' Gourp | Dump a group for debug
Â Â ' param group[i] - group to dump
Â Â grpÂ =Â group[i]
Â Â TextWindow.WriteLine("name="Â +Â grp["name"])
Â Â TextWindow.WriteLine("x="Â +Â grp["x"])
Â Â TextWindow.WriteLine("y="Â +Â grp["y"])
Â Â TextWindow.WriteLine("cx="Â +Â grp["cx"])
Â Â TextWindow.WriteLine("width="Â +Â grp["width"])
Â Â TextWindow.WriteLine("dir="Â +Â grp["dir"])
Â Â shapeÂ =Â grp["shape"]
Â Â ForÂ jÂ =Â 1Â ToÂ Array.GetItemCount(shape)
Â Â Â Â TextWindow.WriteLine("shape["Â +Â jÂ +Â "]="Â +Â WQÂ +Â shape[j]Â +Â WQ)
Â Â EndFor
EndSub

SubÂ Group_Flip
Â Â ' Group | Flip a group
Â Â ' param group[i] - group to flip
Â Â ' return group[i] - flipped group
Â Â grpÂ =Â group[i]
Â Â gxÂ =Â grp["x"]
Â Â gyÂ =Â grp["y"]
Â Â shapeÂ =Â grp["shape"]
Â Â nÂ =Â Array.GetItemCount(shape)
Â Â ForÂ angleÂ =Â 20Â ToÂ 180Â StepÂ 20
Â Â Â Â _aÂ =Â Math.GetRadians(angle)
Â Â Â Â scaleXÂ =Â Math.Cos(_a)
Â Â Â Â ForÂ jÂ =Â 1Â ToÂ n
Â Â Â Â Â Â shpÂ =Â shape[j]
Â Â Â Â Â Â Shapes.Zoom(shp["obj"],Â Math.Abs(scaleX),Â 1)
Â Â Â Â Â Â cxÂ =Â shp["x"]Â +Â shp["width"]Â /Â 2
Â Â Â Â Â Â cxÂ =Â (cxÂ -Â grp["cx"])Â *Â scaleXÂ +Â grp["cx"]
Â Â Â Â Â Â Shapes.Move(shp["obj"],Â cxÂ -Â shp["width"]Â /Â 2Â +Â gx,Â shp["y"]Â +Â gy)
Â Â Â Â Â Â IfÂ angleÂ =Â 100Â AndÂ shp["angle"]Â <>Â 0Â Then
Â Â Â Â Â Â Â Â shp["angle"]Â =Â -shp["angle"]
Â Â Â Â Â Â Â Â Shapes.Rotate(shp["obj"],Â shp["angle"])
Â Â Â Â Â Â Â Â shape[j]Â =Â shp
Â Â Â Â Â Â EndIf
Â Â Â Â Â Â IfÂ angleÂ =Â 180Â Then
Â Â Â Â Â Â Â Â _xÂ =Â Math.Floor((cxÂ -Â shp["width"]Â /Â 2)Â *Â 100)Â /Â 100
Â Â Â Â Â Â Â Â shp["rx"]Â =Â _x
Â Â Â Â Â Â Â Â shp["x"]Â =Â _x
Â Â Â Â Â Â Â Â shape[j]Â =Â shp
Â Â Â Â Â Â EndIf
Â Â Â Â EndFor
Â Â Â Â Program.Delay(20)
Â Â EndFor
Â Â grp["dir"]Â =Â grp["dir"]Â *Â -1
Â Â grp["shape"]Â =Â shape
Â Â group[i]Â =Â grp
EndSub

Sub Group_Hide
  ' Group | Hide a group
  ' param group[i] - the group to hide
Â Â ' return group[i] - the updated group
  grp = group[i]
  shape = grp["shape"]
  Stack.PushValue("local", i)
  For i = 1 To Array.GetItemCount(shape)
    shp = shape[i]
    Shapes.HideShape(shp["obj"])
  EndFor
  i = Stack.PopValue("local")
EndSub

SubÂ Group_Move
Â Â ' Group | Move a group
Â Â ' param group[i] - the group to move
Â Â ' param x, y - the position to move
Â Â ' return group[i] - the updated group
Â Â grpÂ =Â group[i]
Â Â sÂ =Â grp["scale"]
Â Â grp["x"]Â =Â x
Â Â grp["y"]Â =Â y
Â Â shapeÂ =Â grp["shape"]
Â Â nÂ =Â Array.GetItemCount(shape)
Â Â ForÂ jÂ =Â 1Â ToÂ n
Â Â Â Â shpÂ =Â shape[j]
Â Â Â Â IfÂ silverlightÂ AndÂ Text.IsSubText("tri|line",Â shp["func"])Â Then
Â Â Â Â Â Â _xÂ =Â shp["wx"]
Â Â Â Â Â Â _yÂ =Â shp["wy"]
Â Â Â Â Else
Â Â Â Â Â Â _xÂ =Â shp["rx"]
Â Â Â Â Â Â _yÂ =Â shp["ry"]
Â Â Â Â EndIf
Â Â Â Â Shapes.Move(shp["obj"],Â grp["x"]Â +Â _xÂ *Â s,Â grp["y"]Â +Â _yÂ *Â s)
Â Â EndFor
Â Â group[i]Â =Â grp
EndSub

Sub Group_Remove
  ' Group | Remove a group
  ' param group[i] - the group to hide
Â Â ' return shape [] - the removed shapes
  ' return shX, shY - origin of shape array
  ' return name - removed group name
  grp = group[i]
Â Â shapeÂ =Â grp["shape"]
  Stack.PushValue("local", i)
  For i = 1 To Array.GetItemCount(shape)
    shp = shape[i]
    Shapes.Remove(shp["obj"])
  EndFor
  shX = grp["x"]
  shY = grp["y"]
  i = Stack.PopValue("local")
EndSub

Sub Group_Show
  ' Group | Show a group
  ' param group[i] - the group to show
Â Â ' return group[i] - the updated group
  grp = group[i]
Â Â shapeÂ =Â grp["shape"]
  Stack.PushValue("local", i)
  For i = 1 To Array.GetItemCount(shape)
    shp = shape[i]
    Shapes.ShowShape(shp["obj"])
  EndFor
  i = Stack.PopValue("local")
EndSub

Sub Math_CartesianToPolar
  ' Math | convert cartesian coodinate to polar coordinate
  ' param x, y - cartesian coordinate
  ' return r, a - polar coordinate
  r = Math.SquareRoot(x * x + y * y)
  If x = 0 And y > 0 Then
    a = 90 ' [degree]
  ElseIf x = 0 And y < 0 Then
    a = -90
  ElseIf x = 0 And y = 0 Then
    a = 0
  Else
    a = Math.ArcTan(y / x) * 180 / Math.Pi
  EndIf
  If x < 0 Then
    a = a + 180
  ElseIf x > 0 And y < 0 Then
    a = a + 360
  EndIf
EndSub

Sub SB_RotateWorkaround
  ' Small Basic | Rotate workaround for Silverlight
  ' param shp - current shape
  ' param x, y - original coordinate
  ' param alpha - angle [radian]
  ' returns x, y - workaround coordinate
  If shp["func"] = "tri" Then
    x1 = -Math.Floor(shp["x3"] / 2)
    y1 = -Math.Floor(shp["y3"] / 2)
  ElseIf shp["func"] = "line" Then
    x1 = -Math.Floor(Math.Abs(shp["x1"] - shp["x2"]) / 2)
    y1 = -Math.Floor(Math.Abs(shp["y1"] - shp["y2"]) / 2)
  EndIf
  ox = x - x1
  oy = y - y1
  x = x1 * Math.Cos(alpha) - y1 * Math.Sin(alpha) + ox
  y = x1 * Math.Sin(alpha) + y1 * Math.Cos(alpha) + oy
EndSub

Sub SB_Workaround
  ' Small Basic | Workaround for Silverlight
  ' returns silverlight - "True" if in remote
  color = GraphicsWindow.GetPixel(0, 0)
  If Text.GetLength(color) > 7 Then
    silverlight = "True"
    msWait = 300
  Else
    silverlight = "False"
  EndIf
EndSub

Sub Shapes_CalcWidthAndHeight
  ' Shapes | Calculate total width and height of shapes
  ' param shape[] - shape array
  ' return shWidth, shHeight - total size of shapes
  For i = 1 To Array.GetItemCount(shape)
    shp = shape[i]
    If shp["func"] = "tri" Or shp["func"] = "line" Then
      xmin = shp["x1"]
      xmax = shp["x1"]
      ymin = shp["y1"]
      ymax = shp["y1"]
      If shp["x2"] < xmin Then
        xmin = shp["x2"]
      EndIf
      If xmax < shp["x2"] Then
        xmax = shp["x2"]
      EndIf
      If shp["y2"] < ymin Then
        ymin = shp["y2"]
      EndIf
      If ymax < shp["y2"] Then
        ymax = shp["y2"]
      EndIf
      If shp["func"] = "tri" Then
        If shp["x3"] < xmin Then
          xmin = shp["x3"]
        EndIf
        If xmax < shp["x3"] Then
          xmax = shp["x3"]
        EndIf
        If shp["y3"] < ymin Then
          ymin = shp["y3"]
        EndIf
        If ymax < shp["y3"] Then
          ymax = shp["y3"]
        EndIf
      EndIf
      shp["width"] = xmax - xmin
      shp["height"] = ymax - ymin
    EndIf
    If i = 1 Then
      shWidth = shp["x"] + shp["width"]
      shHeight = shp["y"] + shp["height"]
    Else
      If shWidth < shp["x"] + shp["width"] Then
        shWidth = shp["x"] + shp["width"]
      EndIf
      If shHeight < shp["y"] + shp["height"] Then
        shHeight = shp["y"] + shp["height"]
      EndIf
    EndIf
    shape[i] = shp
  EndFor
EndSub

Sub Shapes_Init
  ' Shapes | Initialize shapes data
  ' return shX, shY - current position of shapes
  ' return shape - array of shapes
  shX = 10 ' x offset
  shY = 10 ' y offset
  shape = ""
  shape[1] = "func=text;x=0;y=0;fn=Segoe UI;fs=12;fb=True;text=bold;bc=#000000;"
  shape[2] = "func=text;x=0;y=16;fn=Segoe UI;fs=12;fi=True;text=italics;bc=#000000;"
  shape[3] = "func=text;x=0;y=32;fn=Segoe UI;fs=36;fb=True;text=Heading 1;bc=#000000;"
  shape[4] = "func=text;x=0;y=72;fn=Segoe UI;fs=26;fb=True;text=Heading 2;bc=#000000;"
  shape[5] = "func=text;x=0;y=102;fn=Segoe UI;fs=16;fb=True;text=Heading 3;bc=#000000;"
  shape[6] = "func=ell;x=20;y=128;x2=50;y2=54;width=5;height=5;bc=#000000;pw=0;"
  shape[7] = "func=text;x=30;y=122;fn=Segoe UI;fs=12;text=Bullet List;bc=#000000;"
  shape[8] = "func=ell;x=40;y=148;x2=50;y2=54;width=5;height=5;bc=#FFFFFF;pc=#000000;pw=1;"
  shape[9] = "func=text;x=50;y=142;fn=Segoe UI;fs=12;text=Bullet List 2;bc=#000000;"
  shape[10] = "func=text;x=18;y=158;fn=Segoe UI;fs=12;text=1. Number List;bc=#000000;"
  shape[11] = "func=text;x=38;y=174;fn=Segoe UI;fs=12;text=i. Number List 2;bc=#000000;"
  shape[12] = "func=img;x=0;y=190;src=http://www.nonkit.com/smallbasic.files/Turtle.png;"
  shape[13] = "func=rect;x=0;y=442;width=200;height=54;bc=#FFFFFF;pc=#666666;pw=1;"
  shape[14] = "func=rect;x=0;y=460;width=200;height=1;pc=#666666;pw=1;"
  shape[15] = "func=rect;x=0;y=478;width=200;height=1;pc=#666666;pw=1;"
  shape[16] = "func=rect;x=100;y=442;width=1;height=54;pc=#666666;pw=1;"
  shape[17] = "func=text;x=2;y=442;fn=Segoe UI;fs=12;fb=True;text=Table Heading 1;bc=#000000;"
  shape[18] = "func=text;x=102;y=442;fn=Segoe UI;fs=12;fb=True;text=Table Heading 2;bc=#000000;"
  shape[19] = "func=text;x=2;y=460;fn=Segoe UI;fs=12;text=Row 1-Cell 1;bc=#000000;"
  shape[20] = "func=text;x=102;y=460;fn=Segoe UI;fs=12;text=Row 1-Cell 2;bc=#000000;"
  shape[21] = "func=text;x=2;y=478;fn=Segoe UI;fs=12;text=Row 2-Cell 1;bc=#000000;"
  shape[22] = "func=text;x=102;y=478;fn=Segoe UI;fs=12;text=Row 2-Cell 2;bc=#000000;"
  shape[23] = "func=rect;x=0;y=500;width=578;height=1;pc=#666666;pw=1;"
EndSub
